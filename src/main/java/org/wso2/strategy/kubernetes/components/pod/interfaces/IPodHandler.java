/*
* Copyright (c) 2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package org.wso2.strategy.kubernetes.components.pod.interfaces;

import io.fabric8.kubernetes.api.model.Pod;
import io.fabric8.kubernetes.api.model.ReplicationController;
import org.wso2.strategy.miscellaneous.exception.CarbonKernelHandlerException;

import java.util.List;

/**
 * a Java interface for Pod handling operations
 */
public interface IPodHandler {
    /**
     * creates a new pod with the specified Docker Image name
     *
     * @param podName               name of the pod
     * @param podLabel              value of pod label
     * @param tomcatDockerImageName Apache Tomcat based Docker Image name with deployed web artifact
     * @throws CarbonKernelHandlerException
     */
    void createPod(String podName, String podLabel, String tomcatDockerImageName) throws CarbonKernelHandlerException;

    /**
     * returns the list of active pods
     *
     * @return list of Kubernetes pods
     */
    List<Pod> getPods();

    /**
     * deletes the pod specified by the identifier
     *
     * @param podName name of the pod
     * @return the pod entity that was deleted
     * @throws CarbonKernelHandlerException
     */
    Pod deletePod(String podName) throws CarbonKernelHandlerException;

    /**
     * deletes pods generated by a replication controller with similar pod base name
     *
     * @param controller      the replication controller which controlled the pods to be deleted
     * @param creator         creator of the Docker image
     * @param podArtifactName name of the artifact deployed in Docker Container(s) within the pod
     * @throws CarbonKernelHandlerException
     */
    void deleteReplicaPods(ReplicationController controller, String creator, String podArtifactName)
            throws CarbonKernelHandlerException;
}
